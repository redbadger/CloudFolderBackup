// <auto-generated />
// ReSharper disable InconsistentNaming
#pragma warning disable 169

namespace RedBadger.CloudFolderBackup.Specs
{
    using System;
    using System.IO;

    using com.mosso.cloudfiles;

    using Machine.Specifications;

    using Rhino.Mocks;

    public abstract class a_Uploader
    {
        protected static IFolderConnection sourceFolder;

        protected static IConnection cloudConnection;

        protected static IUploader Uploader;

        private Establish context = () =>
            {
                sourceFolder = MockRepository.GenerateStub<IFolderConnection>();
                cloudConnection = MockRepository.GenerateStub<IConnection>();
                Uploader = new Uploader(sourceFolder, cloudConnection);
            };
    }

    [Subject(typeof(Uploader))]
    public class when_started_with_a_nonexistant_folder : a_Uploader
    {
        private const string containerName = "Container";

        static Exception Exception;

        private Establish context = () => sourceFolder.Expect(c => c.IsValid()).Return(false);

        private Because of = () => Exception = Catch.Exception(() => Uploader.Run(containerName));

        private It should_fail = () => Exception.ShouldBeOfType<DirectoryNotFoundException>();
    }

    [Subject(typeof(Uploader))]
    public class when_started_with_a_nonexistant_cloud_container : a_Uploader
    {
        static Exception Exception;

        Establish context = () => sourceFolder.Expect(c => c.IsValid()).Return(true);

        private Because of = () => Exception = Catch.Exception(() => Uploader.Run("Container"));

        private It should_fail = () => Exception.ShouldBeOfType<IndexOutOfRangeException>();
    }
}